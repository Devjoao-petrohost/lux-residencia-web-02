
import { useEffect } from 'react';
import { useNavigate, Navigate } from 'react-router-dom'; // Adicionado Navigate
import { useAuth } from '@/hooks/useAuth'; // Corrigido caminho
import { toast } from '@/hooks/use-toast';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRoles: string[];
  redirectTo?: string;
}

export function ProtectedRoute({ 
  children, 
  requiredRoles, 
  redirectTo 
}: ProtectedRouteProps) {
  const { user, profile, loading, authError } = useAuth();
  const navigate = useNavigate();

  // Tela de loading enquanto verifica autentica√ß√£o e perfil
  if (loading) {
    console.log('‚è≥ ProtectedRoute: Ainda carregando (loading global)...');
    return (
      <div className="min-h-screen flex items-center justify-center bg-off-white">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-charcoal mx-auto"></div>
          <p className="mt-4 font-sora text-stone-grey">Verificando acesso...</p>
          <p className="mt-2 font-sora text-sm text-stone-grey">
            Se esta tela n√£o sair, verifique o console para debug
          </p>
        </div>
      </div>
    );
  }

  // Ap√≥s o loading, verifica√ß√µes de autentica√ß√£o e perfil
  useEffect(() => {
    // N√£o faz nada se estiver carregando (j√° tratado acima)
    if (loading) return;

    console.log('üõ°Ô∏è ProtectedRoute: Estado atual (ap√≥s loading):', {
      hasUser: !!user,
      hasProfile: !!profile,
      profileRole: profile?.role,
      requiredRoles,
      authError
    });

    // Se houve erro de autentica√ß√£o vindo do useAuth (ex: falha ao buscar perfil)
    if (authError && !profile) { // Considera authError apenas se n√£o houver perfil
      console.error('‚ùå ProtectedRoute: Erro de autentica√ß√£o/perfil do useAuth:', authError);
      toast({
        title: "Erro de Autentica√ß√£o",
        description: authError,
        variant: "destructive"
      });
      
      if (requiredRoles.includes('admin_hotel')) {
        navigate('/admin/hotel/login');
      } else if (requiredRoles.includes('admin_total')) {
        navigate('/admin/total/login');
      } else {
        navigate(redirectTo || '/admin');
      }
      return;
    }

    // Se n√£o tem usu√°rio logado
    if (!user) {
      console.log('üö´ ProtectedRoute: Usu√°rio n√£o logado, redirecionando...');
      toast({
        title: "Acesso Negado",
        description: "Voc√™ precisa fazer login para acessar esta √°rea.",
        variant: "destructive"
      });
      
      if (requiredRoles.includes('admin_hotel')) {
        navigate('/admin/hotel/login');
      } else if (requiredRoles.includes('admin_total')) {
        navigate('/admin/total/login');
      } else {
        navigate(redirectTo || '/admin');
      }
      return;
    }

    // Se tem usu√°rio, mas n√£o tem perfil (ex: RLS impedindo acesso ou perfil ainda n√£o criado)
    if (!profile) {
      console.error('‚ùå ProtectedRoute: Perfil n√£o encontrado para usu√°rio logado.');
      toast({
        title: "Erro de Perfil",
        description: "Perfil de usu√°rio n√£o encontrado. Verifique suas permiss√µes ou tente fazer login novamente.",
        variant: "destructive"
      });
      
      if (requiredRoles.includes('admin_hotel')) {
        navigate('/admin/hotel/login');
      } else if (requiredRoles.includes('admin_total')) {
        navigate('/admin/total/login');
      } else {
        navigate(redirectTo || '/admin');
      }
      return;
    }

    // Se tem usu√°rio e perfil, mas n√£o tem a role necess√°ria
    if (!requiredRoles.includes(profile.role)) {
      console.error('üîí ProtectedRoute: Role insuficiente:', {
        userRole: profile.role,
        requiredRoles
      });
      toast({
        title: "Acesso Negado",
        description: `Voc√™ n√£o tem permiss√£o para acessar esta √°rea. Role necess√°ria: ${requiredRoles.join(' ou ')}, sua role: ${profile.role}`,
        variant: "destructive"
      });
      
      // Redirecionar baseado na role ATUAL do usu√°rio, se ele tiver alguma
      if (profile.role === 'admin_hotel') {
        navigate('/admin/hotel');
      } else if (profile.role === 'admin_total') {
        navigate('/admin/total');
      } else {
        // Se a role n√£o for nenhuma das esperadas, envia para uma p√°gina gen√©rica de admin
        // ou para a p√°gina de login padr√£o como fallback se redirectTo n√£o estiver definido.
        navigate(redirectTo || '/admin'); 
      }
      return;
    }

    console.log('‚úÖ ProtectedRoute: Acesso autorizado!');
  }, [user, profile, loading, authError, navigate, requiredRoles, redirectTo]);

  // Se passou por loading e o useEffect ainda n√£o redirecionou,
  // e temos usu√°rio, perfil e role correta, renderiza children.
  if (user && profile && requiredRoles.includes(profile.role)) {
    console.log('üéâ ProtectedRoute: Renderizando conte√∫do protegido (ap√≥s checks no effect e condi√ß√£o final)');
    return <>{children}</>;
  }
  
  // Se chegou aqui e n√£o renderizou children, √© um estado inesperado ou
  // o useEffect est√° prestes a redirecionar.
  // Evita renderizar children prematuramente ou uma tela branca.
  // O loading j√° foi tratado. Se n√£o tem user/profile/role correta,
  // o useEffect deve ter redirecionado ou ir√° redirecionar.
  // Este return √© um fallback para o caso de o effect n√£o ter disparado imediatamente
  // ou se os checks condicionais n√£o capturarem todos os cen√°rios de redirecionamento.
  // A tela de loading j√° foi exibida.
  console.log('‚è≥ ProtectedRoute: Aguardando redirecionamento do useEffect ou estado final para renderizar.');
  return null; // Ou um spinner/mensagem mais leve, j√° que o loading principal passou.
  // Retornar null √© seguro se o useEffect for redirecionar.
}
