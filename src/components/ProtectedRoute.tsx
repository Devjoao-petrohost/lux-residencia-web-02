
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/hooks/useAuth';
import { toast } from '@/hooks/use-toast'; // Certifique-se que este √© o toast correto (shadcn/ui)

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRoles: string[];
  redirectTo?: string; // Fallback geral de login, ex: /login
}

export function ProtectedRoute({ 
  children, 
  requiredRoles, 
  redirectTo = '/admin' // Um fallback gen√©rico, pode ser ajustado
}: ProtectedRouteProps) {
  const { user, profile, loading, authError, signOut } = useAuth(); // Adicionado signOut
  const navigate = useNavigate();

  const defaultLoginPaths: { [key: string]: string } = {
    'admin_hotel': '/admin/hotel/login',
    'admin_total': '/admin/total/login',
    // Adicione outros mapeamentos de role para p√°gina de login se necess√°rio
  };

  // Determina para qual p√°gina de login redirecionar com base na primeira role requerida
  // ou usa o redirectTo gen√©rico.
  const loginRedirectPath = requiredRoles.length > 0 && defaultLoginPaths[requiredRoles[0]] 
                            ? defaultLoginPaths[requiredRoles[0]] 
                            : redirectTo;

  useEffect(() => {
    // Se o estado de autentica√ß√£o ainda est√° carregando, n√£o faz nada.
    // O componente renderizar√° o spinner/tela de loading abaixo.
    if (loading) {
      console.log('üõ°Ô∏è ProtectedRoute (useEffect): Auth state ainda carregando...');
      return;
    }

    console.log('üõ°Ô∏è ProtectedRoute (useEffect): Auth state carregado. Verificando acesso:', {
      user: !!user,
      profileRole: profile?.role,
      requiredRoles,
      authError
    });

    // Cen√°rio 1: Erro de autentica√ß√£o vindo do useAuth (ex: falha ao buscar perfil)
    if (authError && !profile) { // Um erro de autentica√ß√£o E n√£o h√° perfil
      console.error('‚ùå ProtectedRoute: Erro de autentica√ß√£o/perfil detectado:', authError);
      toast({
        title: "Erro de Autentica√ß√£o",
        description: authError,
        variant: "destructive"
      });
      // Se houve erro ao buscar perfil, √© melhor deslogar para for√ßar um novo login limpo.
      signOut().finally(() => navigate(loginRedirectPath));
      return;
    }

    // Cen√°rio 2: Usu√°rio n√£o autenticado
    if (!user) {
      console.log('üö´ ProtectedRoute: Usu√°rio n√£o logado. Redirecionando para:', loginRedirectPath);
      toast({
        title: "Acesso Necess√°rio",
        description: "Voc√™ precisa fazer login para acessar esta √°rea.",
        variant: "destructive"
      });
      navigate(loginRedirectPath);
      return;
    }

    // Cen√°rio 3: Usu√°rio autenticado, mas sem perfil (e sem erro expl√≠cito sobre isso em authError)
    // Isso pode indicar um problema de cria√ß√£o de perfil no backend ou RLS.
    if (user && !profile) {
      console.error('‚ùå ProtectedRoute: Perfil n√£o encontrado para usu√°rio logado ID:', user.id);
      toast({
        title: "Erro de Perfil",
        description: "Seu perfil n√£o foi encontrado. Tente fazer login novamente ou contate o suporte.",
        variant: "destructive"
      });
      signOut().finally(() => navigate(loginRedirectPath)); // Deslogar para evitar estado quebrado
      return;
    }
    
    // Cen√°rio 4: Usu√°rio e perfil existem, mas a role n√£o √© suficiente
    if (profile && !requiredRoles.includes(profile.role)) {
      console.warn('üîí ProtectedRoute: Role insuficiente.', { userRole: profile.role, requiredRoles });
      toast({
        title: "Acesso Negado",
        description: `Voc√™ n√£o tem permiss√£o (${profile.role}) para acessar esta √°rea.`,
        variant: "destructive"
      });
      // Redireciona para uma p√°gina apropriada √† role atual ou um fallback
      if (profile.role === 'admin_hotel') navigate('/admin/hotel');
      else if (profile.role === 'admin_total') navigate('/admin/total');
      else navigate(redirectTo); // Ou uma p√°gina de "acesso negado"
      return;
    }

    // Cen√°rio 5: Todas as verifica√ß√µes passaram, acesso permitido.
    // N√£o √© preciso fazer nada aqui, o conte√∫do ser√° renderizado.
    console.log('‚úÖ ProtectedRoute: Acesso autorizado!');

  }, [user, profile, loading, authError, navigate, requiredRoles, loginRedirectPath, redirectTo, signOut]);

  // Enquanto o estado de autentica√ß√£o est√° sendo resolvido, mostra uma tela de loading.
  if (loading) {
    console.log('‚è≥ ProtectedRoute (render): Exibindo tela de loading...');
    return (
      <div className="min-h-screen flex items-center justify-center bg-off-white">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-charcoal mx-auto"></div>
          <p className="mt-4 font-sora text-stone-grey">Verificando acesso...</p>
        </div>
      </div>
    );
  }

  // Ap√≥s o loading, se todas as condi√ß√µes para acesso s√£o satisfeitas (e o useEffect n√£o redirecionou),
  // renderiza o conte√∫do protegido.
  if (!loading && user && profile && requiredRoles.includes(profile.role)) {
    console.log('üéâ ProtectedRoute (render): Renderizando conte√∫do protegido.');
    return <>{children}</>;
  }

  // Se chegou aqui, significa que o loading terminou, mas o usu√°rio n√£o tem acesso
  // (e o useEffect j√° deve ter iniciado um redirecionamento).
  // Retornar null evita renderizar conte√∫do indevido enquanto o redirecionamento ocorre.
  console.log('ü§î ProtectedRoute (render): Aguardando redirecionamento do useEffect ou estado final.');
  return null;
}
